---
- sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_file: /etc/sysctl.d/kubernetes.conf
    reload: no
  with_items:
    - net.bridge.bridge-nf-call-iptables
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-ip6tables

- name: 'Reload sysctl values'
  command: 'sysctl --system'
  register: status
- debug: msg="{{ status.stdout }}"
- debug: msg="{{ status.stderr }}"

- name: 'Load necessary modules for containerd'
  modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - overlay
    - br_netfilter
  
- name: 'Remove swapfile from /etc/fstab'
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: 'Disable swap'
  command: swapoff -a

- name: 'Install prerequisite packages'
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - net-tools
    - git

- name: 'Uninstall docker from distribution if was installed'
  apt:
    name:
      - docker 
      - docker-engine 
      - docker.io 
      - runc
    state: absent

- name: 'Install aptitude using apt'
  apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

- name: 'Install required system packages'
  apt: name={{ item }} state=latest update_cache=yes
  loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'gnupg-agent', 'software-properties-common' ]

- name: 'Install containerd and its dependecies'
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - containerd

- name: 'Enable service containerd'
  service:
    name: containerd
    enabled: yes

- name: 'Start service containerd, if not started'
  service:
    name: containerd
    state: started

- name: 'Create directory for containerd config toml file'
  file:
    path: /etc/containerd
    state: directory
    owner: root
    group: root
    mode: 0755

- name: 'Generate default configuration for containerd'
  shell: 'containerd config default | sudo tee /etc/containerd/config.toml'
  register: status
- debug: msg="{{ status.stdout }}"
- debug: msg="{{ status.stderr }}"

- name: 'Restart containerd service'
  systemd:
    state: restarted
    daemon_reload: yes
    name: containerd


